name: Render-like Build Full Cache

on:
  # Manual trigger
  workflow_dispatch:
  # Run on pushes to main
  push:
    branches: [ main ]
  # Run on pull request to main
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    
    env:
      NODE_ENV: development
      
    steps:
    - name: Record Build Start Time
      id: build_start
      run: echo "BUILD_START_TIME=$(date +%s)" >> $GITHUB_ENV
      
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 1  # Shallow clone for faster checkout
      
    # Setup Node.js with explicit cache keys for different parts of the project
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        # Don't use the built-in cache option, we'll set up our own explicit caching
        
    # Cache the git repository itself (focusing on specific files/dirs that rarely change)
    - name: Cache Repository Assets
      id: cache-repo-assets
      uses: actions/cache@v3
      with:
        path: |
          .git
          client/public
          client/src/assets
          server/src/templates
        key: ${{ runner.os }}-repo-assets-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-repo-assets-
    
    # Root dependencies cache
    - name: Cache root node_modules
      id: cache-root-deps
      uses: actions/cache@v3
      with:
        path: node_modules
        key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
    
    # Client dependencies cache
    - name: Cache client node_modules
      id: cache-client-deps
      uses: actions/cache@v3
      with:
        path: client/node_modules
        key: ${{ runner.os }}-client-${{ hashFiles('client/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-client-
    
    # Server dependencies cache
    - name: Cache server node_modules
      id: cache-server-deps
      uses: actions/cache@v3
      with:
        path: server/node_modules
        key: ${{ runner.os }}-server-${{ hashFiles('server/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-server-
    
    # Client build cache for TypeScript compilation
    - name: Cache client build
      id: cache-client-build
      uses: actions/cache@v3
      with:
        path: |
          client/.cache
          client/node_modules/.cache
          client/tsconfig.tsbuildinfo
        key: ${{ runner.os }}-client-build-${{ hashFiles('client/src/**/*.ts', 'client/src/**/*.tsx') }}
        restore-keys: |
          ${{ runner.os }}-client-build-
    
    # Server build cache for TypeScript compilation
    - name: Cache server build
      id: cache-server-build
      uses: actions/cache@v3
      with:
        path: |
          server/tsconfig.tsbuildinfo
          server/.tsbuildinfo
        key: ${{ runner.os }}-server-build-${{ hashFiles('server/src/**/*.ts') }}
        restore-keys: |
          ${{ runner.os }}-server-build-
    
    # Cache webpack and babel output
    - name: Cache webpack output
      id: cache-webpack
      uses: actions/cache@v3
      with:
        path: |
          client/node_modules/.cache/babel-loader
          client/node_modules/.cache/webpack
          client/.webpack-cache
        key: ${{ runner.os }}-webpack-${{ hashFiles('client/src/**/*.*', 'client/webpack.config.js', 'client/babel.config.js') }}
        restore-keys: |
          ${{ runner.os }}-webpack-
    
    # Report on cache hits/misses
    - name: Report Cache Status
      run: |
        echo "Root dependencies cache hit: ${{ steps.cache-root-deps.outputs.cache-hit == 'true' && 'Yes' || 'No' }}"
        echo "Client dependencies cache hit: ${{ steps.cache-client-deps.outputs.cache-hit == 'true' && 'Yes' || 'No' }}"
        echo "Server dependencies cache hit: ${{ steps.cache-server-deps.outputs.cache-hit == 'true' && 'Yes' || 'No' }}"
        echo "Client build cache hit: ${{ steps.cache-client-build.outputs.cache-hit == 'true' && 'Yes' || 'No' }}"
        echo "Server build cache hit: ${{ steps.cache-server-build.outputs.cache-hit == 'true' && 'Yes' || 'No' }}"
        echo "Webpack cache hit: ${{ steps.cache-webpack.outputs.cache-hit == 'true' && 'Yes' || 'No' }}"
        echo "Repository assets cache hit: ${{ steps.cache-repo-assets.outputs.cache-hit == 'true' && 'Yes' || 'No' }}"
    
    - name: Record Cache End Time
      run: echo "CACHE_END_TIME=$(date +%s)" >> $GITHUB_ENV
    
    # Render installs dependencies and builds in one command
    # Their buildCommand from render.yaml: NODE_ENV=development npm run install:all && npm run build
    
    # Install root dependencies
    - name: Install Root Dependencies
      run: npm install
      if: steps.cache-root-deps.outputs.cache-hit != 'true'
      
    # Install client dependencies
    - name: Install Client Dependencies
      run: cd client && npm install
      if: steps.cache-client-deps.outputs.cache-hit != 'true'
      
    # Install server dependencies
    - name: Install Server Dependencies
      run: cd server && npm install
      if: steps.cache-server-deps.outputs.cache-hit != 'true'
      
    - name: Record Install End Time
      run: echo "INSTALL_END_TIME=$(date +%s)" >> $GITHUB_ENV
      
    # Build the client with incremental builds if cache is available
    - name: Build Client
      run: |
        if [ "${{ steps.cache-client-build.outputs.cache-hit }}" == "true" ]; then
          echo "Using incremental build for client"
          cd client && npm run build -- --incremental
        else
          cd client && npm run build
        fi
      env:
        # Prevent treating warnings as errors in client build
        CI: "false"
        
    - name: Record Client Build End Time
      run: echo "CLIENT_BUILD_END_TIME=$(date +%s)" >> $GITHUB_ENV
        
    # Build the server with incremental builds if cache is available
    - name: Build Server
      run: |
        if [ "${{ steps.cache-server-build.outputs.cache-hit }}" == "true" ]; then
          echo "Using incremental build for server"
          cd server && npm run build -- --incremental
        else
          cd server && npm run build
        fi
      
    - name: Record Build End Time
      run: echo "BUILD_END_TIME=$(date +%s)" >> $GITHUB_ENV
      
    # Render would start the service after a successful build
    # We can't actually start a service in GitHub Actions, but we can verify it would start
    
    - name: Verify Server Can Start
      run: cd server && node -e "require('./dist/index'); console.log('Server can start successfully');"
      continue-on-error: true
      env:
        NODE_ENV: production
        PORT: 10000
        # We don't have a real DATABASE_URL in Actions, but that's okay for this test
        
    # Calculate and report build times
    - name: Report Build Times
      run: |
        TOTAL_BUILD_TIME=$((BUILD_END_TIME - BUILD_START_TIME))
        CACHE_TIME=$((CACHE_END_TIME - BUILD_START_TIME))
        INSTALL_TIME=$((INSTALL_END_TIME - CACHE_END_TIME))
        CLIENT_BUILD_TIME=$((CLIENT_BUILD_END_TIME - INSTALL_END_TIME))
        SERVER_BUILD_TIME=$((BUILD_END_TIME - CLIENT_BUILD_END_TIME))
        TOTAL_INSTALL_TIME=$((INSTALL_END_TIME - BUILD_START_TIME))
        TOTAL_BUILD_ONLY_TIME=$((BUILD_END_TIME - INSTALL_END_TIME))
        
        # Display cache hit information
        echo "::notice::Cache Hit - Root Dependencies: ${{ steps.cache-root-deps.outputs.cache-hit == 'true' && 'Yes' || 'No' }}"
        echo "::notice::Cache Hit - Client Dependencies: ${{ steps.cache-client-deps.outputs.cache-hit == 'true' && 'Yes' || 'No' }}"
        echo "::notice::Cache Hit - Server Dependencies: ${{ steps.cache-server-deps.outputs.cache-hit == 'true' && 'Yes' || 'No' }}"
        echo "::notice::Cache Hit - Client Build: ${{ steps.cache-client-build.outputs.cache-hit == 'true' && 'Yes' || 'No' }}"
        echo "::notice::Cache Hit - Server Build: ${{ steps.cache-server-build.outputs.cache-hit == 'true' && 'Yes' || 'No' }}"
        echo "::notice::Cache Hit - Webpack: ${{ steps.cache-webpack.outputs.cache-hit == 'true' && 'Yes' || 'No' }}"
        echo "::notice::Cache Hit - Repo Assets: ${{ steps.cache-repo-assets.outputs.cache-hit == 'true' && 'Yes' || 'No' }}"
        
        echo "::notice::Total Build Time: $TOTAL_BUILD_TIME seconds"
        echo "::notice::Cache Resolution Time: $CACHE_TIME seconds"
        echo "::notice::Dependency Installation Time: $INSTALL_TIME seconds"
        echo "::notice::Client Build Time: $CLIENT_BUILD_TIME seconds"
        echo "::notice::Server Build Time: $SERVER_BUILD_TIME seconds"
        echo "::notice::Total Installation Time (Cache + Install): $TOTAL_INSTALL_TIME seconds"
        echo "::notice::Total Build-Only Time: $TOTAL_BUILD_ONLY_TIME seconds"
        
        # Save build times to an artifact
        echo "Total Build Time: $TOTAL_BUILD_TIME seconds" > render-like-build-times-full-cache.txt
        echo "Cache Resolution Time: $CACHE_TIME seconds" >> render-like-build-times-full-cache.txt
        echo "Dependency Installation Time: $INSTALL_TIME seconds" >> render-like-build-times-full-cache.txt
        echo "Client Build Time: $CLIENT_BUILD_TIME seconds" >> render-like-build-times-full-cache.txt
        echo "Server Build Time: $SERVER_BUILD_TIME seconds" >> render-like-build-times-full-cache.txt
        echo "Total Installation Time (Cache + Install): $TOTAL_INSTALL_TIME seconds" >> render-like-build-times-full-cache.txt
        echo "Total Build-Only Time: $TOTAL_BUILD_ONLY_TIME seconds" >> render-like-build-times-full-cache.txt
        echo "Cache Hit - Root: ${{ steps.cache-root-deps.outputs.cache-hit == 'true' && 'Yes' || 'No' }}" >> render-like-build-times-full-cache.txt
        echo "Cache Hit - Client: ${{ steps.cache-client-deps.outputs.cache-hit == 'true' && 'Yes' || 'No' }}" >> render-like-build-times-full-cache.txt
        echo "Cache Hit - Server: ${{ steps.cache-server-deps.outputs.cache-hit == 'true' && 'Yes' || 'No' }}" >> render-like-build-times-full-cache.txt
        echo "Cache Hit - Client Build: ${{ steps.cache-client-build.outputs.cache-hit == 'true' && 'Yes' || 'No' }}" >> render-like-build-times-full-cache.txt
        echo "Cache Hit - Server Build: ${{ steps.cache-server-build.outputs.cache-hit == 'true' && 'Yes' || 'No' }}" >> render-like-build-times-full-cache.txt
        echo "Cache Hit - Webpack: ${{ steps.cache-webpack.outputs.cache-hit == 'true' && 'Yes' || 'No' }}" >> render-like-build-times-full-cache.txt
        echo "Cache Hit - Repo Assets: ${{ steps.cache-repo-assets.outputs.cache-hit == 'true' && 'Yes' || 'No' }}" >> render-like-build-times-full-cache.txt
        
        # Calculate cache effectiveness metrics
        if [[ "${{ steps.cache-root-deps.outputs.cache-hit }}" == "true" || "${{ steps.cache-client-deps.outputs.cache-hit }}" == "true" || "${{ steps.cache-server-deps.outputs.cache-hit }}" == "true" ]]; then
          echo "::notice::Dependency Cache Effectiveness: Saved approximately $INSTALL_TIME seconds"
          echo "Dependency Cache Effectiveness: Saved approximately $INSTALL_TIME seconds" >> render-like-build-times-full-cache.txt
        fi
        
        # Determine how repository and build caching helped
        if [[ "${{ steps.cache-client-build.outputs.cache-hit }}" == "true" || "${{ steps.cache-server-build.outputs.cache-hit }}" == "true" || "${{ steps.cache-webpack.outputs.cache-hit }}" == "true" ]]; then
          echo "::notice::Build Cache Effectiveness: Enabled incremental builds"
          echo "Build Cache Effectiveness: Enabled incremental builds" >> render-like-build-times-full-cache.txt
        fi
        
    # Upload build artifacts
    - name: Upload Server Build
      uses: actions/upload-artifact@v4
      with:
        name: server-build-full-cache
        path: server/dist
        
    - name: Upload Client Build
      uses: actions/upload-artifact@v4
      with:
        name: client-build-full-cache
        path: client/build
        
    - name: Upload Build Time Stats
      uses: actions/upload-artifact@v4
      with:
        name: render-like-build-times-full-cache
        path: render-like-build-times-full-cache.txt

    - name: Debug node_modules
      run: |
        echo "Root node_modules size:"
        du -sh node_modules
        echo "Client node_modules size:"
        du -sh client/node_modules
        echo "Server node_modules size:"
        du -sh server/node_modules 